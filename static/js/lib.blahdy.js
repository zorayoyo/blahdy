// Generated by CoffeeScript 1.3.1
(function() {
  var BlahdyClient, root, _ref;

  BlahdyClient = (function() {

    BlahdyClient.name = 'BlahdyClient';

    function BlahdyClient(network) {
      this.network = network;
      this.apiBase = 'http://127.0.0.1:8888/api/';
      this.username = '';
      this.token = '';
    }

    BlahdyClient.prototype.defaultErrorHandler = function(url, xhr, textStatus, errorThrown) {
      return console.log('Error:', url, xhr, textStatus, errorThrown);
    };

    BlahdyClient.prototype.get = function(ajax_url, ajax_params, on_success, on_error) {
      return this.do_ajax('GET', ajax_url, ajax_params, {}, function(result, textStatus, xhr) {
        return on_success(result, textStatus, xhr);
      }, function(xhr, textStatus, errorThrown) {
        if (on_error === void 0 || on_error === null) {
          return this.defaultErrorHandler(ajax_url, xhr, textStatus, errorThrown);
        } else {
          return on_error(xhr, textStatus, errorThrown);
        }
      });
    };

    BlahdyClient.prototype.post = function(ajax_url, ajax_params, on_success, on_error) {
      return this.do_ajax('POST', ajax_url, ajax_params, {}, function(result, textStatus, xhr) {
        return on_success(result, textStatus, xhr);
      }, function(xhr, textStatus, errorThrown) {
        if (on_error === void 0 || on_error === null) {
          return this.defaultErrorHandler(ajax_url, xhr, textStatus, errorThrown);
        } else {
          return on_error(xhr, textStatus, errorThrown);
        }
      });
    };

    BlahdyClient.prototype.do_ajax = function(method, url, params, headers, on_success, on_error) {
      var arr, k, v;
      if (method === 'GET') {
        arr = [];
        for (k in params) {
          v = params[k];
          arr.push(encodeURIComponent(k) + '=' + encodeURIComponent(v));
        }
        url = url + '?' + arr.join('&');
        params = {};
      }
      headers['X-BLAHDY-NAME'] = this.username;
      headers['X-BLAHDY-TOKEN'] = this.token;
      return this.network.do_request(method, url, params, headers, null, on_success, on_error);
    };

    BlahdyClient.prototype.auth = function(username, password, success, error) {
      var params, url;
      url = this.apiBase + 'account/auth';
      params = {
        username: username,
        password: password
      };
      return this.post(url, params, success, error);
    };

    BlahdyClient.prototype.createAccount = function(username, password, name, success, error) {
      var params, url;
      url = this.apiBase + 'account/create';
      params = {
        username: username,
        password: password,
        name: name,
        bio: "",
        phone: "",
        email: ""
      };
      return this.post(url, params, success, error);
    };

    BlahdyClient.prototype.getAllBlahList = function(on_success) {
      var params, url;
      url = this.apiBase + 'blah/all';
      params = {};
      return this.get(url, params, on_success);
    };

    BlahdyClient.prototype.createBlah = function(text, on_success) {
      var params, url;
      url = this.apiBase + 'blah/create';
      params = {
        text: text
      };
      return this.post(url, params, on_success);
    };

    BlahdyClient.prototype.destroyBlah = function(id, on_success) {
      var params, url;
      url = this.apiBase + 'blah/destroy';
      params = {
        id: id
      };
      return this.post(url, params, on_success);
    };

    return BlahdyClient;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.BlahdyClient = (_ref = root.BlahdyClient) != null ? _ref : BlahdyClient;

}).call(this);
